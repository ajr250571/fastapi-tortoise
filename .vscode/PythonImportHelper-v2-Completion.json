[
    {
        "label": "Database",
        "importPath": "pony.orm",
        "description": "pony.orm",
        "isExtraImport": true,
        "detail": "pony.orm",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "pony.orm",
        "description": "pony.orm",
        "isExtraImport": true,
        "detail": "pony.orm",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "pony.orm",
        "description": "pony.orm",
        "isExtraImport": true,
        "detail": "pony.orm",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "pony.orm",
        "description": "pony.orm",
        "isExtraImport": true,
        "detail": "pony.orm",
        "documentation": {}
    },
    {
        "label": "PrimaryKey",
        "importPath": "pony.orm",
        "description": "pony.orm",
        "isExtraImport": true,
        "detail": "pony.orm",
        "documentation": {}
    },
    {
        "label": "db_session",
        "importPath": "pony.orm",
        "description": "pony.orm",
        "isExtraImport": true,
        "detail": "pony.orm",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "db = Database()\ndb.bind(provider='mysql',\n        host=os.getenv('DB_HOST', 'localhost'),\n        user=os.getenv('DB_USER', 'root'),\n        passwd=os.getenv('DB_PASSWORD', ''),\n        db=os.getenv('DB_NAME', 'pony-db'))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"FastAPI Pony Demo\")\napp.include_router(router, prefix=\"/api\")\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"main:app\", host=\"localhost\", port=8000, reload=True)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class User(db.Entity):\n    _table_ = 'users'\n    id = PrimaryKey(int, auto=True)\n    username = Required(str, unique=True)\n    email = Required(str, unique=True)\n    created_at = Required(datetime, default=datetime.now)\n    posts = Set('Post')\nclass Post(db.Entity):\n    _table_ = 'posts'\n    id = PrimaryKey(int, auto=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Post(db.Entity):\n    _table_ = 'posts'\n    id = PrimaryKey(int, auto=True)\n    title = Required(str)\n    content = Required(str)\n    created_at = Required(datetime, default=datetime.now)\n    author = Required(User)\ndb.generate_mapping(create_tables=True)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def hello():\n    return {\"message\": \"Hello World\"}\n@router.post(\"/users/\", response_model=UserResponse)\n@db_session\ndef create_user(user: UserCreate):\n    try:\n        db_user = User(\n            username=user.username,\n            email=user.email\n        )",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def create_user(user: UserCreate):\n    try:\n        db_user = User(\n            username=user.username,\n            email=user.email\n        )\n        return db_user\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=str(e))\n@router.get(\"/users/{user_id}\", response_model=UserResponse)",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def get_user(user_id: int):\n    user = User.get(id=user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user.to_dict()\n@router.post(\"/posts/\", response_model=PostResponse)\n@db_session\ndef create_post(author_id: int, post: PostCreate):\n    user = User.get(id=author_id)\n    if not user:",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def create_post(author_id: int, post: PostCreate):\n    user = User.get(id=author_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    try:\n        db_post = Post(\n            title=post.title,\n            content=post.content,\n            author=user\n        )",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "def get_post(post_id: int):\n    post = Post.get(id=post_id)\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    return post",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes",
        "description": "routes",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/hello/\")\ndef hello():\n    return {\"message\": \"Hello World\"}\n@router.post(\"/users/\", response_model=UserResponse)\n@db_session\ndef create_user(user: UserCreate):\n    try:\n        db_user = User(\n            username=user.username,",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserBase(BaseModel):\n    username: str\n    email: EmailStr\nclass UserCreate(UserBase):\n    pass\nclass UserResponse(UserBase):\n    id: int\n    created_at: datetime\n    class Config:\n        from_attributes = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserCreate(UserBase):\n    pass\nclass UserResponse(UserBase):\n    id: int\n    created_at: datetime\n    class Config:\n        from_attributes = True\nclass PostBase(BaseModel):\n    title: str\n    content: str",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserResponse(UserBase):\n    id: int\n    created_at: datetime\n    class Config:\n        from_attributes = True\nclass PostBase(BaseModel):\n    title: str\n    content: str\nclass PostCreate(PostBase):\n    pass",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\nclass PostCreate(PostBase):\n    pass\nclass PostResponse(PostBase):\n    id: int\n    created_at: datetime\n    author: int\n    class Config:",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostCreate(PostBase):\n    pass\nclass PostResponse(PostBase):\n    id: int\n    created_at: datetime\n    author: int\n    class Config:\n        from_attributes = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class PostResponse(PostBase):\n    id: int\n    created_at: datetime\n    author: int\n    class Config:\n        from_attributes = True",
        "detail": "schemas",
        "documentation": {}
    }
]